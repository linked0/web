※🌟🏓🦋⚾️🥎🏐🐳🍀🌼🌸🏆🍜😈🐹🦁🌟🔹♦️⚡️💥🌈🔥⚾️🐶🦄☕️🚘🔴※
※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※
BSC_URL=https://bnb-mainnet.g.alchemy.com/v2/bYIHvE9WE52_CdgOdDmCBpgACsITRcZz
BSC_TESTNET_URL=https://bnb-testnet.g.alchemy.com/v2/bYIHvE9WE52_CdgOdDmCBpgACsITRcZz

ADMIN_KEY=0x95658c0e006d561028bfd326f3f7998f1e5a4696850bc592d6ce3a61e134c311
USER_KEY=0x4cb75b81e7cc8d2172232ca7e901deb043771ec32373445eb342b93b1c3edf9a
LOYALTY_POINT_ADMIN_KEY=0x95658c0e006d561028bfd326f3f7998f1e5a4696850bc592d6ce3a61e134c311
LOYALTY_POINT_ADMIN_PASSWORD=QWER1234

INITIAL_OWNER=0xA100Cbb212fdB5Ba02F6CFB5694b04354799a1b1
INITIAL_DISTRIBUTOR_MANAGER=0xA100Cbb212fdB5Ba02F6CFB5694b04354799a1b1
AIMOND_ADDRESS=0x494f7a1adFC8a56deC74E393EA60Ef79B67282d2

ADMIN_ADDRESS=0xA100Cbb212fdB5Ba02F6CFB5694b04354799a1b1
USER_ADDRESS=0x7773e0F2009ac743A21cd81307590d6b7F1a86a8
RECIPIENT_ADDRESS=0x73e91c711E846a4c5459008aCA801d053b6a8D2A

INVESTOR_VESTING_ADDRESS=0xA18E5e75823B10686b499DFf9Aebf0DA5A6aB175
FOUNDER_VESTING_ADDRESS=0x7B490e472BAa426c5C396a31b2f8EBd3599C5529
EMPLOYEE_VESTING_ADDRESS=0x1A50E18d1d98fB8B34Cf35a1cecE1F03e1004B19
MOCK_VESTING_ADDRESS=0x4e9637883fB71E10110142BEa859f0112B0B373D
LOYALTY_POINT_ADDRESS=0xd923F400535e1355d72626E2017842D0c6309bF1
LOYALTY_POINT_FUND=1000000

INVESTOR_ADDRESS=0x73e91c711E846a4c5459008aCA801d053b6a8D2A
INVESTOR_VESTING_AMOUNT=5000000

LOYALTY_POINT_RECIPIENT_1=0x98559b13896f39509CDE3Ea473D326a28755bf8A
LOYALTY_POINT_RECIPIENT_2=0x9c16f94a6fC8b0cf4f97b48484A246f9296D6888

※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※
mrg go \!console \!tests \!log \!trie \!metrics \!graphql \!event \!ethdb \!ethstats \!params \!node\

※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※
CONDUIT_CONTROLLER_ADDRESS=0x6A9866BEB9CE792F57ea116F457825fDcC1FC75D
CONDUIT_ADDRESS=0x59932169d312E34Fd17CC6E479530a3c9a455e92
CONDUIT_KEY=0x1811DfdE14b2e9aBAF948079E8962d200E71aCFD000000000000000000000000
SEAPORT_ADDRESS=0x8565Dcd93Ec8f8bA06851a2D91c2BAdd84D40526
ASSET_CONTRACT_SHARED_ADDRESS=0xAbC0Fa75F06848AD3F71c46976dA46990a2C8799
LAZY_MINT_ADAPTER_ADDRESS=0xa5d49c88AfBdA22B12682AA9904B70b7fe99C9A7
WBOA_ADDRESS=0x1e80e9b38F5727Ad2c56a2e90bfF21642434Ff82
MULTICALL_ADDRESS=0x24eC01416dCfA432b4b877F0fc230955b3855C92
SPIDER_VERSE_NFT_LAST_COMBINE_TOKEN_ID=0xc559c7d0c3851140185900d223b7fe531e8823a80000000000000200000f4240


※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※
### 0 기본 세팅
= ubuntu 버전은 22.04 이상
ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-20230325
= .gitconfig에 web/sub/gitconfig-aws 내용을 복사
= aws security settings
SSH, EL-RPC, CL-NODE, EL-NODE

= make
sudo apt-get update
sudo apt-get install make

= git update
sudo add-apt-repository ppa:git-core/ppa
sudo apt-get update
sudo apt-get install git

= docker
1) Set up Docker's apt repository.
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update
2) Install the Docker packages.
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

3) Verify that the Docker Engine installation
sudo docker run hello-world

4) Docker daemon socket Permission
sudo gpasswd -a $USER docker
sudo systemctl restart docker
(머신 리부팅)

= gcc & g++ 설치
현재 설치되어 있는 것은(3.37.37.195) 11.4.0
sudo apt install gcc
sudo apt install g++

= go (go1.21.0)
sudo rm -rf /usr/bin/go
sudo rm -rf /usr/local/go
wget https://go.dev/dl/go1.21.0.linux-amd64.tar.gz
sudo tar -C /usr/local -xzf go1.21.0.linux-amd64.tar.gz
add “export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin” to ./bashrc

= nvm install & use
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.4/install.sh | bash
source ~/.bashrc  
nvm install 16 && nvm use 16
npm install -g npm@9.8.1 @bazel/bazelisk

= python 3.10 env
python3 버전확인하고 3.10 설치
sudo apt install python3.10 (brew install python@3.10)
sudo apt install python3-dev
sudo apt install python3.10-venv
python3.10 -m venv deposit-venv

= install "zcli"
go install github.com/protolambda/zcli@latest

= poohgeth compile
./compile

= poohprysm compile (실패하면 다시 컴파일)
bazel build //cmd/beacon-chain:beacon-chain --config=release
bazel build //validator:image_bundle --config=release


= ./init testnet 1 & ./enode-cmd으로 실행하기
= 일단 이것으로 설공을 하면 일단 돌지 않고서 대기하고 있을 것임

### 2.  chain-config.yaml 수정하고 genesis 파일 만들기
= 모든 수정은, 내 로컬 머신에서, 새로 딴 브랜치에서 수정하고 모든 머신에서 업데이트하는 방식(브랜치예: el-friday)
= TERMINAL_BLOCK_HASH 지정
"hash"스크립트로 "hash" 항목을 가져옴.
어짜피 고정된 세팅을 사용하므로, 바뀌지 않음. 노드키가 달라지면 바뀔수 있지만, 초기세팅은 똑같은 설정을 사용함.
= MIN_GENESIS_ACTIVE_VALIDATOR_COUNT: 8
= MIN_GENESIS_TIME: 원하는 consensus layer genesis time
    - date +%s으로 현재 시간을 얻어와서 한 600(10분)을 더한다.
    - 🔥 한번 세팅이 된 후에 다시 여러번 시도할때 이 부분만 세팅하기 다시 하면됨
= SHARDING_FORK_VERSION, SHARDING_FORK_EPOCH 주석 처리함

= geth2-testnet-genesis 빌드: ./gen-binary
= genesis.ssz 생성: ./gen_genesis
    - 이부분은 거의 바뀔 일 없음, 같은 mnemonic 쓰기 때문.
= Genesis Validators Root 찾아서 setting.py에 추가
    - get "Genesis Validators Root" with following command on "poohnet" folder.
    - zcli pretty bellatrix  BeaconState config/genesis.ssz > parsedState.json
    - find "genesis_validators_root" on "parsedState.json" file
    - copy the value of "genesis_validators_root" to the following part of setting.py
바뀌는 것이 거의 없음. 같은 mnemonic 쓰기 때문.
    - vi ./poohnet/pooh-deposit-cli/staking_deposit/settings.py
    TestnetSetting = BaseChainSetting(
    NETWORK_NAME=TESTNET, GENESIS_FORK_VERSION=bytes.fromhex('2F1C0000'),
    GENESIS_VALIDATORS_ROOT=bytes.fromhex('e63460dc044e056f26ca8f7406a18867d31f1ec195322f428b5918d4b0153050'))

### 3. staking-deposit-cli
= run "stake" command
    - 이미 생성된 키 파일들이 있으면 ./keys로 키만 복사: 키 복사 (암호:pooh2023!@)
= run "password": sudo vi ~/.pooh/cl/config/password.txt, 암호 추가

### 4. cl & vals 실행
= cnode가 최소 3개는 실행되어야 함.("at least two peered beacon nodes")
= 머신을 재부팅하고 실행하고 처음 실행시킬때 체크하는 과정이 매우 오래 걸림.
= 첫번째 머신에서 cl 실행: ./cnode
= 첫번째 cl의 enr을 알아내서 다른 cnode 스크립트의 bootstrap-node 항목에 세팅하기
= 두번째 머신에서 cl 실행: ./cnode
= 첫번째 머신이 validator이므로 실행: ./validators
= cnode에 이 메시지가 뜨는지 확인: INFO p2p: Peer summary activePeers=1 inbound=1 outbound=0
= validator에서 이 메시지 확인: INFO validator: Waiting for beacon node to sync to latest chain head

### 5. 살펴볼 메시지 on cnode
= 기타: git reset --hard origin/set-cl-node, git reset --hard origin/pos
= Trouble Shooting: https://docs.prylabs.network/docs/troubleshooting/issues-errors
= INFO slotutil: 4m10s until chain genesis genesisStateRoot=0b6a76b8a59b6a65b9accbb90f556fad77af865c2fe23745a0421f6157ed3751 genesisTime=2024-07-02 03:29:20 +0000 UTC genesisValidators=8
=  INFO p2p: Peer summary activePeers=0 inbound=0 outbound=0
--> 이거는 문제로 보임.
= 에러 1
ERROR validator: Failed to request block from beacon node blockSlot=33 error=rpc error: code = Unknown desc = could not build block in parallel: rpc error: code = Internal desc = Could not get local payload: unknown beacon state version pubKey=0x8b439a7aa748
ERROR validator: rpc error: code = Unavailable desc = Syncing to latest head, not ready to respond
= 에러2: 다음의 메시지가 지정된 merge 타임을 지나서도 나타남
INFO validator: Waiting for beacon node to sync to latest chain head
--> RPC gateway provider endpoint에 해당하는 3500번 포트가 열리지 않아서 그런것으로 판단됨
security group이 적용되기 위해서 instance 다시 돌림.
= 에러3: ERROR validator: Failed to request block from beacon node blockSlot=70 error=rpc error: code = Unknown desc = could not build block in parallel: rpc error: code = Internal desc = Could not get local payload: could not prepare payload: payload status is SYNCING or ACCEPTED pubKey=0xaa730e92e28d
--> chain-config.yaml을 적절히 세팅하지 않아서 발생하던 문제를 해결하였으나 위와 같은 문제 추가 발생
= 에러4: ERROR rpc/validator: Could not pack deposits and attestations error=context canceled
ERROR p2p: Failed to find peers error=unable to find requisite number of peers for topic /eth2/65c7e087/sync_committee_1/ssz_snappy - only 0 out of 1 peers were able to be found
--> CL_BOOT_NODE security 설정 안함: 이런 안하면 4000번 포트가 열리지 않음


🍀🌼🌸🏆🍜🍀🌼🌸🏆🔹🍀🌼🌸🏆🍀🌼🌸🏆🍀🌼🌸🏆🍀🌼🌸🏆
🍀🌼🌸🏆🍜🍀🌼🌸🏆🔹🍀🌼🌸🏆🍀🌼🌸🏆🍀🌼🌸🏆🍀🌼🌸🏆

