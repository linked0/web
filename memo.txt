0. 기본 세팅
sudo rm -rf /usr/bin/go
sudo rm -rf /usr/local/go
wget https://go.dev/dl/go1.21.0.linux-amd64.tar.gz
sudo tar -C /usr/local -xzf go1.21.0.linux-amd64.tar.gz
add “export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin” to ./zshrc

1. geth를 새로운 config로 실행
- 일단 이것으로 설공을 하면 일단 돌지 않고서 대기하고 있을 것임

2.  genesis 만들기
- MIN_GENESIS_ACTIVE_VALIDATOR_COUNT: 8
- MIN_GENESIS_TIME: 원하는 consensus layer genesis time
    - date +%s으로 현재 시간을 얻어와서 한 600(10분)을 더한다.
- SHARDING_FORK_VERSION, SHARDING_FORK_EPOCH 주석 처리함
- TERMINAL_BLOCK_HASH 지정
    - el node에서 "eth.getBlockByNumber(0)"를 통해서 "hash" 항목을 가져옴.

3. gen_genesis 스크립트를 실행하여 CL용 genesis 파일을 만든다.
- compile with "make build" on "eth2-testnet-genesis" folder
- "gen_genesis" on "poohnet" folder
- install "zcli"
go install github.com/protolambda/zcli@latest
- get "Genesis Validators Root" with following command on "poohnet" folder.
zcli pretty bellatrix  BeaconState config/genesis.ssz > parsedState.json
- find "genesis_validators_root" on "parsedState.json" file
- copy the value of "genesis_validators_root" to the following part of setting.py
근데 거의 바뀌지 않음.
TestnetSetting = BaseChainSetting(
NETWORK_NAME=TESTNET, GENESIS_FORK_VERSION=bytes.fromhex('2F1C0000'),
GENESIS_VALIDATORS_ROOT=bytes.fromhex('e63460dc044e056f26ca8f7406a18867d31f1ec195322f428b5918d4b0153050'))

4. staking-deposit-cli
- python 3.10 env
sudo apt-get update
sudo apt-get install python3.10-dev
sudo apt install python3.10-venv
python3.10 -m venv py310
source py310/bin/activate (deactivate after all things done)
- sudo ./deposit.sh install 


4. run cl node


4. validator key import


  /**
   * Gas and return values during simulation.
   * @param preOpGas         - The gas used for validation (including preValidationGas)
   * @param prefund          - The required prefund for this operation
   * @param sigFailed        - ValidateUserOp's (or paymaster's) signature check failed
   * @param validAfter       - First timestamp this UserOp is valid (merging account and paymaster time-range)
   * @param validUntil       - Last timestamp this UserOp is valid (merging account and paymaster time-range)
   * @param paymasterContext - Returned by validatePaymasterUserOp (to be passed into postOp)
   */
  struct ReturnInfo {
    uint256 preOpGas;
    uint256 prefund;
    bool sigFailed;
    uint48 validAfter;
    uint48 validUntil;
    bytes paymasterContext;
  }

  
contract ExampleContract {
    struct ValueData {
        string name;
        uint256 value;
    }

    function getData(string calldata _name) public view returns (ValueData memory) {
        bytes32 nameSlot = keccak256(abi.encodePacked(_name));
        bytes32 valueSlot = keccak256(abi.encodePacked(_name, uint256(0)));

        ValueData memory _data;
        bytes memory gottonName;
        uint256 value;
        uint256 nameLength;

        assembly {
            // Load the length of the name from storage
            nameLength := sload(nameSlot)

            // Allocate memory for the gottonName
            gottonName := mload(0x40)
            mstore(gottonName, nameLength)
            
            // Calculate where the free memory will be after gottonName
            let strPtr := add(gottonName, 0x20)
            mstore(0x40, add(strPtr, nameLength))

            // Read the string data from storage
            let dataSlot := add(nameSlot, 1)
            for { let i := 0 } lt(i, nameLength) { i := add(i, 0x20) } {
                mstore(add(strPtr, i), sload(add(dataSlot, div(i, 0x20))))
            }
            
            // Read the uint256 value from storage
            value := sload(valueSlot)
        }

        // Convert the bytes to a string and set the ValueData struct
        _data.name = string(gottonName);
        _data.value = value;

        return _data;
    }
}
```