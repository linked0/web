  
  1. **Install Yarn**: `npm install -g yarn`
2. **Initialize Yarn Project**: `yarn init -y`
3. **Install TypeScript**: `yarn add typescript --dev`
4. **Initialize TypeScript Config**: `yarn tsc --init`
5. **Optional: Install Node.js Type Definitions**: `yarn add @types/node --dev`
6. **Create Project Structure**: `mkdir src` and create starter files.
7. **Configure `tsconfig.json`**: Set root and out directories, and other compiler options.
8. **Update `package.json` Scripts**: Add `build` and `start` scripts.
9. **Compile TypeScript Code**: `yarn build`
10. **Run Your Project**: `yarn start`


  describe("ListSetStore", () => {
    let allPairVault: AllPairVault;
    const ONE_YEAR_IN_SECS = 365 * 24 * 60 * 60;
    const ONE_GWEI = 1_000_000_000;
    const lockedAmount = ONE_GWEI;

    beforeEach(async () => {
      const unlockTime = (await time.latest()) + ONE_YEAR_IN_SECS;
      // const lock = await ethers.deployContract("Lock", [unlockTime], {
      //   value: lockedAmount,
      // });
      // await lock.deployed();

      // const LinkedListSetLib = await ethers.getContractFactory("LinkedListSetLib");
      // const linkedListSetLib = await LinkedListSetLib.deploy();
      // await linkedListSetLib.deployed();

      // const AllPairVaultFactory = await ethers.getContractFactory("AllPairVault", { libraries: { LinkedListSetLib: linkedListSetLib.address } });
      // allPairVault = await AllPairVaultFactory.deploy([lock]);
      // signer = provider.getSigner()
    });

    it("add and contains", async function () {
      // Create a ValueData object
      const valueData = {
        value: 123456, // Example uint240 value
        description: "Example description"
      };

      // const tx = await allPairVault.addValue(valueData);
      // console.log(`TX: ${JSON.stringify(tx)}`);
      // const receipt = await tx.wait();
      // console.log(`Receipt: ${JSON.stringify(receipt)}`);
      // expect(receipt?.status).to.equal(1);

      // const hexStr = ethers.toBeHex(valueData.value, 30);
      // console.log(`type of hexStr: ${hexStr} ${typeof hexStr}`);
      // const byteArray = ethers.getBytes(hexStr);
      // expect(await allPairVault.contains(byteArray)).to.equal(true);
    });
  });
  
    function executeUserOp(
    PackedUserOperation calldata userOp,
    bytes32 userOpHash
  ) external returns (bytes memory) {
    // read from the userOp.callData, but skip the "magic" prefix (executeUserOp sig),
    // which caused it to call this method.
    // bytes calldata innerCall = userOp.callData[4 :];

    bytes memory innerCallRet;
    // if (innerCall.length > 0) {
    //   (address target, bytes memory data) = abi.decode(innerCall, (address, bytes));
    //   bool success;
    //   (success, innerCallRet) = target.call(data);
    //   require(success, "inner call failed");
    // }

    emit Executed(userOp, innerCallRet);
    return innerCallRet;
  }

  
"0x608060405234801561001057600080fd5b50610c92806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80633f35a8f81461005157806373d4a13a1461006d57806385bd22611461008c578063ae55c888146100bc575b600080fd5b61006b6004803603810190610066919061074c565b6100ec565b005b610075610212565b60405161008392919061083e565b60405180910390f35b6100a660048036038101906100a191906108d3565b6102ac565b6040516100b39190610920565b60405180910390f35b6100d660048036038101906100d191906108d3565b6103a2565b6040516100e391906109d1565b60405180910390f35b60008180600001906100fe9190610a02565b60405160200161010f929190610aa4565b60405160208183030381529060405280519060200120905060008280600001906101399190610a02565b600060405160200161014d93929190610ade565b6040516020818303038152906040528051906020012090503660008480600001906101789190610a02565b915091506000856020013590506020830160018087556020870160005b828110156101b6576020810284015160208202830155600181019050610195565b508387555050507f8d27ff9eab67a310465382f46dab70424c824a1407b6b25055baa79db3a20d428680600001906101ee9190610a02565b886020013560405161020293929190610b35565b60405180910390a1505050505050565b600080600001805461022390610b96565b80601f016020809104026020016040519081016040528092919081815260200182805461024f90610b96565b801561029c5780601f106102715761010080835404028352916020019161029c565b820191906000526020600020905b81548152906001019060200180831161027f57829003601f168201915b5050505050908060010154905082565b60008083836040516020016102c2929190610aa4565b6040516020818303038152906040528051906020012090506000848460006040516020016102f293929190610ade565b604051602081830303815290604052805190602001209050600080835480915083549250506103566040518060400160405280600b81526020017f6e616d654c656e6774683a0000000000000000000000000000000000000000008152508261057c565b6103956040518060400160405280600681526020017f76616c75653a00000000000000000000000000000000000000000000000000008152508361057c565b8194505050505092915050565b6103aa6106fa565b600083836040516020016103bf929190610aa4565b6040516020818303038152906040528051906020012090506000848460006040516020016103ef93929190610ade565b60405160208183030381529060405280519060200120905061040f6106fa565b6000602067ffffffffffffffff81111561042c5761042b610bc7565b5b6040519080825280601f01601f19166020018201604052801561045e5781602001600182028036833780820191505090505b50905060008085548091506020840160005b8281101561049657602080820260208b0120015460208202830152600181019050610470565b508654935050506104dc6040518060400160405280600b81526020017f6e616d654c656e6774683a0000000000000000000000000000000000000000008152508261057c565b61051b6040518060400160405280600b81526020017f676f74746f6e4e616d653a00000000000000000000000000000000000000000081525084610618565b61055a6040518060400160405280600681526020017f76616c75653a00000000000000000000000000000000000000000000000000008152508361057c565b8284600001819052508184602001818152505083965050505050505092915050565b610614828260405160240161059292919061083e565b6040516020818303038152906040527fb60e72cc000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506106b4565b5050565b6106b0828260405160240161062e929190610bf6565b6040516020818303038152906040527f4b5c4277000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506106b4565b5050565b6106cb816106c36106ce6106ef565b63ffffffff16565b50565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b610714819050919050565b604051806040016040528060608152602001600081525090565b61071c610c2d565b565b600080fd5b600080fd5b600080fd5b60006040828403121561074357610742610728565b5b81905092915050565b6000602082840312156107625761076161071e565b5b600082013567ffffffffffffffff8111156107805761077f610723565b5b61078c8482850161072d565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156107cf5780820151818401526020810190506107b4565b60008484015250505050565b6000601f19601f8301169050919050565b60006107f782610795565b61080181856107a0565b93506108118185602086016107b1565b61081a816107db565b840191505092915050565b6000819050919050565b61083881610825565b82525050565b6000604082019050818103600083015261085881856107ec565b9050610867602083018461082f565b9392505050565b600080fd5b600080fd5b600080fd5b60008083601f8401126108935761089261086e565b5b8235905067ffffffffffffffff8111156108b0576108af610873565b5b6020830191508360018202830111156108cc576108cb610878565b5b9250929050565b600080602083850312156108ea576108e961071e565b5b600083013567ffffffffffffffff81111561090857610907610723565b5b6109148582860161087d565b92509250509250929050565b6000602082019050610935600083018461082f565b92915050565b600082825260208201905092915050565b600061095782610795565b610961818561093b565b93506109718185602086016107b1565b61097a816107db565b840191505092915050565b61098e81610825565b82525050565b600060408301600083015184820360008601526109b1828261094c565b91505060208301516109c66020860182610985565b508091505092915050565b600060208201905081810360008301526109eb8184610994565b905092915050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112610a1f57610a1e6109f3565b5b80840192508235915067ffffffffffffffff821115610a4157610a406109f8565b5b602083019250600182023603831315610a5d57610a5c6109fd565b5b509250929050565b600081905092915050565b82818337600083830152505050565b6000610a8b8385610a65565b9350610a98838584610a70565b82840190509392505050565b6000610ab1828486610a7f565b91508190509392505050565b6000819050919050565b610ad8610ad382610825565b610abd565b82525050565b6000610aeb828587610a7f565b9150610af78284610ac7565b602082019150819050949350505050565b6000610b1483856107a0565b9350610b21838584610a70565b610b2a836107db565b840190509392505050565b60006040820190508181036000830152610b50818587610b08565b9050610b5f602083018461082f565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610bae57607f821691505b602082108103610bc157610bc0610b67565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006040820190508181036000830152610c1081856107ec565b90508181036020830152610c2481846107ec565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fdfea2646970667358221220bd6ec59aa7452c466f4b8249bca16691d2424ca23e7bf08e202935f37d1d062864736f6c63430008180033"
 
 cast send --create ${full_bytecode} --rpc-url $ETH_RPC_URL --private-key $PRIVATE_KEY --gas-limit 2000000)

 cast send --rpc-url ${RPC_URL} --private-key ${PK} 0x7a0d94f55792c434d74a40883c6ed8545e406d12 0x608060405234801561001057600080fd5b50610833806100206000396000f3fe60806040526004361061003f5760003560e01c806308508b8f1461004457806364e030871461009857806385cf97ab14610138578063a49a7c90146101bc575b600080fd5b34801561005057600080fd5b506100846004803603602081101561006757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166101ec565b604080519115158252519081900360200190f35b61010f600480360360408110156100ae57600080fd5b813591908101906040810160208201356401000000008111156100d057600080fd5b8201836020820111156100e257600080fd5b8035906020019184600183028401116401000000008311171561010457600080fd5b509092509050610217565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561014457600080fd5b5061010f6004803603604081101561015b57600080fd5b8135919081019060408101602082013564010000000081111561017d57600080fd5b82018360208201111561018f57600080fd5b803590602001918460018302840111640100000000831117156101b157600080fd5b509092509050610592565b3480156101c857600080fd5b5061010f600480360360408110156101df57600080fd5b508035906020013561069e565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205460ff1690565b600083606081901c33148061024c57507fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008116155b6102a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260458152602001806107746045913960600191505060405180910390fd5b606084848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604051855195965090943094508b93508692506020918201918291908401908083835b6020831061033557805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016102f8565b51815160209384036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018019909216911617905260408051929094018281037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00183528085528251928201929092207fff000000000000000000000000000000000000000000000000000000000000008383015260609890981b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602183015260358201969096526055808201979097528251808203909701875260750182525084519484019490942073ffffffffffffffffffffffffffffffffffffffff81166000908152938490529390922054929350505060ff16156104a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603f815260200180610735603f913960400191505060405180910390fd5b81602001825188818334f5955050508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461053a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260468152602001806107b96046913960600191505060405180910390fd5b50505073ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790559392505050565b6000308484846040516020018083838082843760408051919093018181037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001825280845281516020928301207fff000000000000000000000000000000000000000000000000000000000000008383015260609990991b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166021820152603581019790975260558088019890985282518088039098018852607590960182525085519585019590952073ffffffffffffffffffffffffffffffffffffffff81166000908152948590529490932054939450505060ff909116159050610697575060005b9392505050565b604080517fff000000000000000000000000000000000000000000000000000000000000006020808301919091523060601b6021830152603582018590526055808301859052835180840390910181526075909201835281519181019190912073ffffffffffffffffffffffffffffffffffffffff81166000908152918290529190205460ff161561072e575060005b9291505056fe496e76616c696420636f6e7472616374206372656174696f6e202d20636f6e74726163742068617320616c7265616479206265656e206465706c6f7965642e496e76616c69642073616c74202d206669727374203230206279746573206f66207468652073616c74206d757374206d617463682063616c6c696e6720616464726573732e4661696c656420746f206465706c6f7920636f6e7472616374207573696e672070726f76696465642073616c7420616e6420696e697469616c697a6174696f6e20636f64652ea265627a7a723058202bdc55310d97c4088f18acf04253db593f0914059f0c781a9df3624dcef0d1cf64736f6c634300050a0032

 cast publish --rpc-url ${RPC_URL} 0xf87e8085174876e800830186a08080ad601f80600e600039806000f350fe60003681823780368234f58015156014578182fd5b80825250506014600cf31ba02222222222222222222222222222222222222222222222222222222222222222a02222222222222222222222222222222222222222222222222222222222222222

 4687d3888356ee20db8d27a8357def01990a33d1fcbbcb3328f884af474f6a75706bfd2a00042bd16bb8b9da71a5e5092a03cd5cb9bd13dd0d6d3583ff1d2d261b

 async function main2() {
  const byteCode = process.env.DATA_STORAGE_BYTECODE || "";
  const deployerWallet = new ethers.Wallet(process.env.DEPLOYER_KEY || "", ethers.provider);
  console.log("Deployer public key: ", await deployerWallet.getAddress());

  // const message = ethers.solidityPackedKeccak256(["bytes"], [ethers.toBeArray(byteCode)]);
  const nonce = ethers.toBeArray(0);
  const gasPrice = ethers.toBeArray(100 * 10 ** 9);
  const gasLimit = ethers.toBeArray(1000000);
  const to = ethers.toBeArray(0);
  const value = ethers.toBeArray(0);
  const data = ethers.getBytes(byteCode);
  const unsignedEncodedTx = ethers.encodeRlp([nonce, gasPrice, gasLimit, to, value, data]);
  const hashedUnsignedEncodedTx = ethers.keccak256(ethers.getBytes(unsignedEncodedTx));
  const sigStr = await deployerWallet.signMessage(hashedUnsignedEncodedTx);
  console.log("Signature: ", sigStr);
  const sig = Signature.from(sigStr);
  console.log("type of r: ", typeof sig.r);
  const signedEncodedTx = ethers.encodeRlp([nonce, gasPrice, gasLimit, to, value, data, ethers.toBeArray(sig.v), ethers.getBytes(sig.r), ethers.getBytes(sig.s)]);
  const signedEncodedTxBytes = ethers.getBytes(signedEncodedTx);
  const tx = signedEncodedTxBytes.reduce((x, y) => x += y.toString(16).padStart(2, '0'), '')
  console.log("Signed encoded tx: ", tx);

  const pubkey = ethers.verifyMessage(hashedUnsignedEncodedTx, sigStr);
  console.log("Pubkey: ", pubkey);
}
0xe2662c5545033460e7cbceb0d53d217db0481973