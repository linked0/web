



   * Gas and return values during simulation.
   * @param preOpGas         - The gas used for validation (including preValidationGas)
   * @param prefund          - The required prefund for this operation
   * @param sigFailed        - ValidateUserOp's (or paymaster's) signature check failed
   * @param validAfter       - First timestamp this UserOp is valid (merging account and paymaster time-range)
   * @param validUntil       - Last timestamp this UserOp is valid (merging account and paymaster time-range)
   * @param paymasterContext - Returned by validatePaymasterUserOp (to be passed into postOp)
   */
  struct ReturnInfo {
    uint256 preOpGas;
    uint256 prefund;
    bool sigFailed;
    uint48 validAfter;
    uint48 validUntil;
    bytes paymasterContext;
  }

  
contract ExampleContract {
    struct ValueData {
        string name;
        uint256 value;
    }

    function getData(string calldata _name) public view returns (ValueData memory) {
        bytes32 nameSlot = keccak256(abi.encodePacked(_name));
        bytes32 valueSlot = keccak256(abi.encodePacked(_name, uint256(0)));

        ValueData memory _data;
        bytes memory gottonName;
        uint256 value;
        uint256 nameLength;

        assembly {
            // Load the length of the name from storage
            nameLength := sload(nameSlot)

            // Allocate memory for the gottonName
            gottonName := mload(0x40)
            mstore(gottonName, nameLength)
            
            // Calculate where the free memory will be after gottonName
            let strPtr := add(gottonName, 0x20)
            mstore(0x40, add(strPtr, nameLength))

            // Read the string data from storage
            let dataSlot := add(nameSlot, 1)
            for { let i := 0 } lt(i, nameLength) { i := add(i, 0x20) } {
                mstore(add(strPtr, i), sload(add(dataSlot, div(i, 0x20))))
            }
            
            // Read the uint256 value from storage
            value := sload(valueSlot)
        }

        // Convert the bytes to a string and set the ValueData struct
        _data.name = string(gottonName);
        _data.value = value;

        return _data;
    }
}
```