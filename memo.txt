
# today's plan: Wendesday
- Deposit contract
- screen으로 좀 띄워놓고 보자. 
- how to set calldata with temporary storage

- https://blog.openzeppelin.com/deep-dive-into-the-minimal-proxy-contract 
- https://medium.com/decipher-media/layer-2-a-hub-of-layer-3s-d83c4c1c7c3a
https://docs.prylabs.network/docs/advanced/proof-of-stake-devnet
https://mxtoolbox.com/SuperTool.aspx?action=tcp%3a3.37.37.195%3a13000&run=toolpage
https://github.com/protolambda/merge-genesis-tools/blob/master/README.md#deposit-contract
geth.ethereum.org/docs/interface/private-network
https://ethereum.stackexchange.com/questions/159998/beacon-chain-1-level-error-msg-beacon-node-is-not-respecting-the-follow-distanc
https://github.com/OffchainLabs/eth-pos-devnet/issues/19
https://youtu.be/5GkgQXycpu8?si=ZePAYj_5UG7S4jSP

https://medium.com/indie-developer-life/how-to-integrate-chatgpt-to-your-ios-app-in-swift-9210bce16e01

Jaylee.io 만료 ==> poohnet으로 변경 필요
poohgeth 이름 바꾸기 
OpenSea와 OpenZepperlin 프로젝트 분석해서 좋은 코드 찾아보자. 
Hardhat 사이너 지정 가능
OPStack 보고 있음. 
- Travel Wallet/소량앤화, 택시 이용앱 Go

- encodedBytes32String, npm list ethers
- 이제 approve가 필요없음.
- 사진 잘 찍는법 - 영어일기 쓰기 - 엘리하이/메가스터디


decodeFunctionResult of AA code

😈🐹🦁😈🐹🦁😈🐹🦁😈🐹🦁😈🐹🦁😈🐹🦁😈🐹🦁😈🐹🦁😈🐹🦁
※🌟🏓🦋⚾️🥎🏐🐳🍀🌼🌸🏆🍜😈🐹🦁🌟🔹♦️⚡️💥🌈🔥⚾️🐶🦄☕️🚘🔴


   * Gas and return values during simulation.
   * @param preOpGas         - The gas used for validation (including preValidationGas)
   * @param prefund          - The required prefund for this operation
   * @param sigFailed        - ValidateUserOp's (or paymaster's) signature check failed
   * @param validAfter       - First timestamp this UserOp is valid (merging account and paymaster time-range)
   * @param validUntil       - Last timestamp this UserOp is valid (merging account and paymaster time-range)
   * @param paymasterContext - Returned by validatePaymasterUserOp (to be passed into postOp)
   */
  struct ReturnInfo {
    uint256 preOpGas;
    uint256 prefund;
    bool sigFailed;
    uint48 validAfter;
    uint48 validUntil;
    bytes paymasterContext;
  }

  
contract ExampleContract {
    struct ValueData {
        string name;
        uint256 value;
    }

    function getData(string calldata _name) public view returns (ValueData memory) {
        bytes32 nameSlot = keccak256(abi.encodePacked(_name));
        bytes32 valueSlot = keccak256(abi.encodePacked(_name, uint256(0)));

        ValueData memory _data;
        bytes memory gottonName;
        uint256 value;
        uint256 nameLength;

        assembly {
            // Load the length of the name from storage
            nameLength := sload(nameSlot)

            // Allocate memory for the gottonName
            gottonName := mload(0x40)
            mstore(gottonName, nameLength)
            
            // Calculate where the free memory will be after gottonName
            let strPtr := add(gottonName, 0x20)
            mstore(0x40, add(strPtr, nameLength))

            // Read the string data from storage
            let dataSlot := add(nameSlot, 1)
            for { let i := 0 } lt(i, nameLength) { i := add(i, 0x20) } {
                mstore(add(strPtr, i), sload(add(dataSlot, div(i, 0x20))))
            }
            
            // Read the uint256 value from storage
            value := sload(valueSlot)
        }

        // Convert the bytes to a string and set the ValueData struct
        _data.name = string(gottonName);
        _data.value = value;

        return _data;
    }
}
```
