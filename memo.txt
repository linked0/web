🌟[정리]🏓🦋⚾️🥎🏐🐳🍀🌼🌸🏆🍜😈🐹🦁🌟🔹♦️⚡️💥🌈🔥⚾️🐶🦄☕️🚘🔴

"compilerOptions": {
    "outDir": "lib",
    "target": "es2020",          // Keep this if you're targeting modern JavaScript
    "module": "ESNext",          // Change this to ESNext for Vite compatibility
    "esModuleInterop": true,     // Keep this for interop with CommonJS modules
    "forceConsistentCasingInFileNames": true,
    "strict": true,
    "skipLibCheck": true,
    "resolveJsonModule": true
  }
}


  else {
    allBasic = new AllBasic(owner, process.env.ALL_BASIC_CONTRACT || "");
  }

  
They are Korean so it's not a problem.
Do you have an updated resume ?
**Lending / Defi protocol**

200M TVL

Only Korean, no foreigners Seoul.

1-3 engineers

SC experience Solidity or Move

40K ~ 100K$

Young team, 31-32 avg age

For non-crypto:

Backend engineer skills

25% comm, 3mo

Position: Smart Contract Engineer

Company Overview: We are an innovative company developing a leading lending protocol in the DeFi space, with a total value locked (TVL) exceeding $300 million. Our platform is the largest of its kind in South Korea and ranks among the top globally. We are committed to revolutionizing the financial landscape through blockchain technology, providing secure and efficient solutions for our users. Join us to be part of a dynamic team that is shaping the future of decentralized finance.

Job Description: As a Smart Contract Developer, you will play a crucial role in improving our products and developing new features. WeSmart are looking for someone with a deep understanding and passion for blockchain technology. Smart contracts are a vital part of our service's security, so a high level of security awareness and attention to detail is essential.

Key Responsibilities:

Design, develop, and deploy smart contracts
Improve existing products and develop new features
Conduct code reviews and ensure quality assurance
Perform security audits and vulnerability analysis
Collaborate with the team to provide efficient solutions
Qualifications:

Experience with Move, Solidity, or Rust (not mandatory)
Passion for blockchain and DeFi
Understanding of smart contracts and distributed systems
Problem-solving skills and analytical thinking
Strong teamwork and communication abilities
Preferred Qualifications:

Experience using DeFi services
Familiarity with version control systems like Git
Experience in Agile/Scrum development environments
Benefits:

Flexible Working Hours: We operate on a 40-hour flexible work schedule. Thanks to our responsible team members, there are no fixed commuting times, but we do have core hours for effective collaboration.

High-Quality Equipment Provided:

MacBook Pro/Air, 27/32-inch high-end LG/Samsung/DELL FULL HD dual monitors.
Adjustable standing desks from Rivart, and ergonomic chairs (Herman Miller, Ergohuman, Sidiz).
We actively support necessary equipment up to 10 million KRW to ensure your comfort.
Unlimited Paid Time Off: Our team members enjoy unlimited half-days, annual leave, and vacation days, allowing for maximum efficiency and personal growth. All time off can be taken freely without an approval process.

One Month of Workation: Take a month-long workation to refresh yourself in a special location. This allows you to work while enjoying leisure time, with only core hours dedicated to work.

Monthly Meal Allowance: We provide a monthly meal allowance of 300,000 KRW. Dinner expenses are covered 100% by the company.

Unlimited Book Support: We support books for self-improvement.

Unlimited Education Expense Support:

100% coverage for essential job-related training.
Fitness Support: We prioritize the health of our team members, offering up to 2 million KRW annually for fitness expenses, such as gym memberships, Pilates, or yoga.

Premium Health Checkup Support: We provide up to 1 million KRW for comprehensive health checkups every two years for eligible employees.


Blockchain developer with 6 years of experience in open-source blockchain mainnet and DApp projects. I’ve successfully collaborated with international teams to deliver key solutions, such as an NFT marketplace deployed on an EVM-based mainnet. Currently focused on expanding my expertise in DeFi, Account Abstraction, and smart contract audits. I am ready to bring my skills and experience to contribute to your company’s success.

=====
Dear Hiring Manager,

I am excited to apply for the Solidity engineer position at BJAK. With six years of blockchain development experience, I have led projects like an NFT marketplace on an EVM-based mainnet, collaborating with diverse teams to deliver successful solutions.

Currently, I am expanding my knowledge in DeFi, Layer 2 scaling, Account Abstraction, and smart contract audits. I am confident that my skills and commitment to continuous learning will allow me to contribute effectively to BJAK’s goals.

Thank you for considering my application. I look forward to discussing how I can support your team.

Sincerely,
Hyunjae Lee
===

인트라넷 그룹웨어 시스템
내용: 결제 시스템 및 HTML 편집기 개발 
사용기술: MFC, C/C++, ActiveX, HTML, UML


https://chatgpt.com/g/g-HcVIV3Alx-buddy/c/670dd0d6-27a0-8005-9187-5e243c49b77c

Migration 폴더의 파일 지우기 
rm src/migrations/Migration20240925113829.ts


⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡
dsinglethreaded=true dtest=agora.test.MultiRoundConsensus dub test

# Saturday
=1 DFS
=2 BFS
=3 DAG
=4 Reachability
=5 Dijkstra -> Grokking & Jay
=6 탐욕법 (Greedy) -> Grokking
=7 동적계획법 (Dynamic Programming) -> Grokking 
8 Binary Search -> Grokking
=9 완전 탐색(Brute Force)
=10 Merge sort

# Not to do
Binary Tree
Connected Component
Topological sort

# Summary
[Algorithms summary] (https://velog.io/@qlgks1/python-%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8-cheat-sheet)

⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️

 
 "bosagoraBlock": 100,
    "bosagora": {
      "commonsBudget": "0x6A9866BEB9CE792F57ea116F457825fDcC1FC75D",
      "commonsBudgetReward": 120000000000000000000,
      "lastCommonsBudgetRewardBlock": 15000100
    }


a1=eth.accounts[1]
a2=eth.accounts[2]
a0=eth.accounts[0]
personal.unlockAccount(a0, 'boa2022!@')
personal.unlockAccount(a1,'boa2022!@')
personal.unlockAccount(a2,'boa2022!@')
miner.setEtherbase(a0)


a0=eth.accounts[0]
a1=personal.importRawKey("7184281c677db98212c216cf11e47a4e9ec8f4b6932aa5d2d902b943ad501d23", "boa2022!@")
a2=personal.importRawKey("ae3b35fcbe8d65fa1e24802f95241ed22c6a68ea3958df0a40607a80bb292f97", "boa2022!@")
personal.unlockAccount(a0, 'boa2022!@')
personal.unlockAccount(a1,'boa2022!@')
personal.unlockAccount(a2,'boa2022!@')
miner.setEtherbase(a0)


eth.sendTransaction({from:a1, to:a2, value:web3.toWei(9, 'ether'), gasLimit:21000, gasPrice: 200000000000})

eth.sendTransaction({from:a0, to:a1, value:web3.toWei(9, 'ether'), gasLimit:21000, gasPrice: 200000000000})
eth.sendTransaction({from:a0, to:a1, value:web3.toWei(9, 'ether'), gasLimit:21000, gasPrice: 200000000000})

eth.pendingTransactions
miner.start()
miner.stop()
web3.fromWei(eth.getBalance(a0), 'ether')
web3.fromWei(eth.getBalance(a1),  'ether')
web3.fromWei(eth.getBalance(a2),  'ether')


⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️⚡️

> ERROR[09-23|18:48:53.285] ###HTTP ServeHTTP>rpcstack starting... /Users/jay/work/pooh-geth/node/rpcstack.go:440 r="&{Method:POST URL:/ Proto:HTTP/1.1 ProtoMajor:1 ProtoMinor:1 Header:map[Accept:[application/json] Accept-Encoding:[gzip, deflate, br, zstd] Accept-Language:[ko,en-US;q=0.9,en;q=0.8] Connection:[keep-alive] Content-Length:[78] Content-Type:[application/json] Origin:[chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn] Sec-Fetch-Dest:[empty] Sec-Fetch-Mode:[cors] Sec-Fetch-Site:[none] User-Agent:[Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36]] Body:0xc0017925c0 GetBody:<nil> ContentLength:78 TransferEncoding:[] Close:false Host:localhost:8545 Form:map[] PostForm:map[] MultipartForm:<nil> Trailer:map[] RemoteAddr:[::1]:59245 RequestURI:/ TLS:<nil> Cancel:<nil> Response:<nil> ctx:0xc001786a50}"

ERROR[09-23|18:48:53.285] ###HTTP ServeHTTP>Befor Setting... /Users/jay/work/pooh-geth/rpc/http.go:331 r="&{Method:POST URL:/ Proto:HTTP/1.1 ProtoMajor:1 ProtoMinor:1 Header:map[Accept:[application/json] Accept-Encoding:[gzip, deflate, br, zstd] Accept-Language:[ko,en-US;q=0.9,en;q=0.8] Connection:[keep-alive] Content-Length:[78] Content-Type:[application/json] Origin:[chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn] Sec-Fetch-Dest:[empty] Sec-Fetch-Mode:[cors] Sec-Fetch-Site:[none] User-Agent:[Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36]] Body:0xc0017925c0 GetBody:<nil> ContentLength:78 TransferEncoding:[] Close:false Host:localhost:8545 Form:map[] PostForm:map[] MultipartForm:<nil> Trailer:map[] RemoteAddr:[::1]:59245 RequestURI:/ TLS:<nil> Cancel:<nil> Response:<nil> ctx:0xc001786a50}"

ERROR[09-23|18:48:53.557] ###HTTP ServeHTTP>rpcstack starting... /Users/jay/work/pooh-geth/node/rpcstack.go:440 r="&{Method:POST URL:/ Proto:HTTP/1.1 ProtoMajor:1 ProtoMinor:1 Header:map[Accept:[application/json] Accept-Encoding:[gzip, deflate, br, zstd] Accept-Language:[ko,en-US;q=0.9,en;q=0.8] Connection:[keep-alive] Content-Length:[329] Content-Type:[application/json] Origin:[chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn] Sec-Fetch-Dest:[empty] Sec-Fetch-Mode:[cors] Sec-Fetch-Site:[none] User-Agent:[Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36]] Body:0xc000648a80 GetBody:<nil> ContentLength:329 TransferEncoding:[] Close:false Host:localhost:8545 Form:map[] PostForm:map[] MultipartForm:<nil> Trailer:map[] RemoteAddr:[::1]:59245 RequestURI:/ TLS:<nil> Cancel:<nil> Response:<nil> ctx:0xc001928cd0}"

ERROR[09-23|18:48:53.558] ###HTTP ServeHTTP>Befor Setting... /Users/jay/work/pooh-geth/rpc/http.go:331 r="&{Method:POST URL:/ Proto:HTTP/1.1 ProtoMajor:1 ProtoMinor:1 Header:map[Accept:[application/json] Accept-Encoding:[gzip, deflate, br, zstd] Accept-Language:[ko,en-US;q=0.9,en;q=0.8] Connection:[keep-alive] Content-Length:[329] Content-Type:[application/json] Origin:[chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn] Sec-Fetch-Dest:[empty] Sec-Fetch-Mode:[cors] Sec-Fetch-Site:[none] User-Agent:[Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36]] Body:0xc000648a80 GetBody:<nil> ContentLength:329 TransferEncoding:[] Close:false Host:localhost:8545 Form:map[] PostForm:map[] MultipartForm:<nil> Trailer:map[] RemoteAddr:[::1]:59245 RequestURI:/ TLS:<nil> Cancel:<nil> Response:<nil> ctx:0xc001928cd0}"

WARN [09-23|18:48:53.558] ###  /Users/jay/work/pooh-geth/internal/ethapi/api.go:1756 tx="(*types.Transaction)(0xc0019aade0)({\n inner: (*types.DynamicFeeTx)(0xc001898500)({\n  ChainID: (*big.Int)(0xc00193a7e0)(12301),\n  Nonce: (uint64) 0,\n  GasTipCap: (*big.Int)(0xc00193a800)(2000000000),\n  GasFeeCap: (*big.Int)(0xc00193a820)(2000000000),\n  Gas: (uint64) 21000,\n  To: (*common.Address)(0xc0001c3458)((len=20 cap=20) 0x8790d4A448873CE0F624E31aC732c06eB211a715),\n  Value: (*big.Int)(0xc00193a840)(1000000000000000000000),\n  Data: ([]uint8) {\n  },\n  AccessList: (types.AccessList) {\n  },\n  V: (*big.Int)(0xc00193a860)(1),\n  R: (*big.Int)(0xc00193a880)(26194740648612207687204453664795104063619832180204919029380079046971224176789),\n  S: (*big.Int)(0xc00193a8a0)(42016204348521776861806891197244274088428402827640033669958419068937496295119)\n }),\n time: (time.Time) 2024-09-23 18:48:53.558455 +0900 KST m=+61.393427186,\n hash: (atomic.Value) {\n  v: (interface {}) <nil>\n },\n size: (atomic.Value) {\n  v: (uint64) 120\n },\n from: (atomic.Value) {\n  v: (interface {}) <nil>\n }\n})\n"