0. 기본 세팅
- .gitconfig에 web/sub/gitconfig-aws 내용을 복사 
- aws security settings
SSH, EL-RPC, CL-NODE, EL-NODE

- go (go1.21.0)
sudo rm -rf /usr/bin/go
sudo rm -rf /usr/local/go
wget https://go.dev/dl/go1.21.0.linux-amd64.tar.gz
sudo tar -C /usr/local -xzf go1.21.0.linux-amd64.tar.gz
add “export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin” to ./bashrc

- nvm install & use
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.4/install.sh | bash
source ~/.bashrc  
nvm install 16 && nvm use 16
npm install -g npm@9.8.1 @bazel/bazelisk

- install "zcli"
go install github.com/protolambda/zcli@latest

- poohgeth compile
./compile

- poohprysm compile (실패하면 다시 컴파일)
bazel build //cmd/beacon-chain:beacon-chain --config=release
bazel build //validator:image_bundle --config=release

1. geth를 새로운 config로 실행
- 일단 이것으로 설공을 하면 일단 돌지 않고서 대기하고 있을 것임

2.  genesis 만들기
- run "chain-config" on "poohprysm" folder
- MIN_GENESIS_ACTIVE_VALIDATOR_COUNT: 8
- MIN_GENESIS_TIME: 원하는 consensus layer genesis time
    - date +%s으로 현재 시간을 얻어와서 한 600(10분)을 더한다.
    - 🔥 한번 세팅이 된 후에 다시 여러번 시도할때 이 부분만 세팅하기 다시 하면됨
- SHARDING_FORK_VERSION, SHARDING_FORK_EPOCH 주석 처리함
- TERMINAL_BLOCK_HASH 지정
    - "hash"명령으로 "hash" 항목을 가져옴.

- geth2-testnet-genesis 빌드
"genesis-bin" on "poohprysm" folder
- "gen_genesis" on "poohprysm" folder: 이부분은 거의 바뀔 일 없음, 같은 mnemonic 쓰기 때문.
- get "Genesis Validators Root" with following command on "poohnet" folder.
zcli pretty bellatrix  BeaconState config/genesis.ssz > parsedState.json
- find "genesis_validators_root" on "parsedState.json" file
- copy the value of "genesis_validators_root" to the following part of setting.py
TestnetSetting = BaseChainSetting(
NETWORK_NAME=TESTNET, GENESIS_FORK_VERSION=bytes.fromhex('2F1C0000'),
GENESIS_VALIDATORS_ROOT=bytes.fromhex('e63460dc044e056f26ca8f7406a18867d31f1ec195322f428b5918d4b0153050'))

3. staking-deposit-cli
- cd ./poohnet/pooh-deposit-cl
- python 3.10 env
sudo apt-get update
sudo apt-get install python3.10-dev
sudo apt install python3.10-venv
python3.10 -m venv py310
source py310/bin/activate (deactivate after all things done)
- sudo ./deposit.sh install 
- export PYTHONPATH=$PYTHONPATH:/home/ubuntu/poohprysm/poohnet/pooh-deposit-cli
(주의 PATH는 다를수 있음)
- ./deposit.sh existing-mnemonic
- ./keys: 키 복사 (암호:pooh2023!@)
- run "password": sudo vi ~/.pooh/cl/config/password.txt, 암호 추가

4. cl & vals 실행
- cnode가 최소 3개는 실행되어야 함.("at least two peered beacon nodes")
- 첫번째 머신에서 cl 실행: ./cnode
- 첫번째 cl의 enr을 알아내서 다른 cnode 스크립트의 bootstrap-node 항목에 세팅하기 
- 두번째 머신에서 cl 실행: ./cnode
- 첫번째 머신이 validator이므로 실행: ./validators
- cnode에 이 메시지가 뜨는지 확인: INFO p2p: Peer summary activePeers=1 inbound=1 outbound=0
- validator에서 이 메시지 확인: INFO validator: Waiting for beacon node to sync to latest chain head

5. 살펴볼 메시지 on cnode
- INFO slotutil: 4m10s until chain genesis genesisStateRoot=0b6a76b8a59b6a65b9accbb90f556fad77af865c2fe23745a0421f6157ed3751 genesisTime=2024-07-02 03:29:20 +0000 UTC genesisValidators=8
-  INFO p2p: Peer summary activePeers=0 inbound=0 outbound=0
--> 이거는 문제로 보임.
- 에러 1
ERROR validator: Failed to request block from beacon node blockSlot=33 error=rpc error: code = Unknown desc = could not build block in parallel: rpc error: code = Internal desc = Could not get local payload: unknown beacon state version pubKey=0x8b439a7aa748
ERROR validator: rpc error: code = Unavailable desc = Syncing to latest head, not ready to respond
- 에러2: 다음의 메시지가 지정된 merge 타임을 지나서도 나타남
INFO validator: Waiting for beacon node to sync to latest chain head
--> RPC gateway provider endpoint에 해당하는 3500번 포트가 열리지 않아서 그런것으로 판단됨
security group이 적용되기 위해서 instance 다시 돌림.
- 에러3: ERROR validator: Failed to request block from beacon node blockSlot=70 error=rpc error: code = Unknown desc = could not build block in parallel: rpc error: code = Internal desc = Could not get local payload: could not prepare payload: payload status is SYNCING or ACCEPTED pubKey=0xaa730e92e28d
--> chain-config.yaml을 적절히 세팅하지 않아서 발생하던 문제를 해결하였으나 위와 같은 문제 추가 발생
함께 나타나는 오류:
ERROR rpc/validator: Could not pack deposits and attestations error=context canceled
ERROR p2p: Failed to find peers error=unable to find requisite number of peers for topic /eth2/65c7e087/sync_committee_1/ssz_snappy - only 0 out of 1 peers were able to be found




   * Gas and return values during simulation.
   * @param preOpGas         - The gas used for validation (including preValidationGas)
   * @param prefund          - The required prefund for this operation
   * @param sigFailed        - ValidateUserOp's (or paymaster's) signature check failed
   * @param validAfter       - First timestamp this UserOp is valid (merging account and paymaster time-range)
   * @param validUntil       - Last timestamp this UserOp is valid (merging account and paymaster time-range)
   * @param paymasterContext - Returned by validatePaymasterUserOp (to be passed into postOp)
   */
  struct ReturnInfo {
    uint256 preOpGas;
    uint256 prefund;
    bool sigFailed;
    uint48 validAfter;
    uint48 validUntil;
    bytes paymasterContext;
  }

  
contract ExampleContract {
    struct ValueData {
        string name;
        uint256 value;
    }

    function getData(string calldata _name) public view returns (ValueData memory) {
        bytes32 nameSlot = keccak256(abi.encodePacked(_name));
        bytes32 valueSlot = keccak256(abi.encodePacked(_name, uint256(0)));

        ValueData memory _data;
        bytes memory gottonName;
        uint256 value;
        uint256 nameLength;

        assembly {
            // Load the length of the name from storage
            nameLength := sload(nameSlot)

            // Allocate memory for the gottonName
            gottonName := mload(0x40)
            mstore(gottonName, nameLength)
            
            // Calculate where the free memory will be after gottonName
            let strPtr := add(gottonName, 0x20)
            mstore(0x40, add(strPtr, nameLength))

            // Read the string data from storage
            let dataSlot := add(nameSlot, 1)
            for { let i := 0 } lt(i, nameLength) { i := add(i, 0x20) } {
                mstore(add(strPtr, i), sload(add(dataSlot, div(i, 0x20))))
            }
            
            // Read the uint256 value from storage
            value := sload(valueSlot)
        }

        // Convert the bytes to a string and set the ValueData struct
        _data.name = string(gottonName);
        _data.value = value;

        return _data;
    }
}
```