// SCH Course Copyright Policy (C): DO-NOT-SHARE-WITH-ANYONE
// https://smartcontractshacking.com/#copyright-policy
pragma solidity ^0.8.13;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

import "../interfaces/IOptimizerStrategy.sol";
import "hardhat/console.sol";

/**
 * @notice Implementation of a vault to deposit funds into for yield optimizing.
 * This is the vault contract that users interface with and send funds to.
 * The strategy contract that actually does the yield optimizing is included in ./OptimizerStrategy.sol.
 */
contract OptimizerVault is ERC20, ReentrancyGuard {
    using SafeERC20 for IERC20;

    // The strategy that is managing the money in the system.
    IOptimizerStrategy public strategy;

    /**
     * @param _strategy the address of the strategy.
     * @param _name the name of the vault token.
     * @param _symbol the symbol of the vault token.
     */
    constructor(
        IOptimizerStrategy _strategy,
        string memory _name,
        string memory _symbol
    ) public ERC20(_name, _symbol) {
        strategy = _strategy;
    }

    /**
     * @dev The token accepted by the Vault system.
     */
    function want() public view returns (IERC20) {
        return IERC20(strategy.want());
    }

    /**
     * @dev Get the total underlying value of {want} deposited in the system.
     * Account for the vault contract balance, the strategy contract balance
     * and the balance allocated to other contracts/systems as part of the strategy.
     */
    function balance() public view returns (uint256) {
        console.log("want().balanceOf: %s", want().balanceOf(address(this)));
        console.log(
            "strategy.balanceOf: %s",
            IOptimizerStrategy(strategy).balanceOf()
        );
        return
            want().balanceOf(address(this)) +
            IOptimizerStrategy(strategy).balanceOf();
    }

    /**
     * @dev Get the available {want}.
     */
    function available() public view returns (uint256) {
        return want().balanceOf(address(this));
    }

    /**
     * @dev Send deposited funds to the strategy. The strategy is then responsible for
     * putting the funds to work.
     */
    function sendToStrat() public {
        want().safeTransfer(address(strategy), available());
        strategy.deposit();
    }

    /**
     * @dev This is how user's enter the vault system. The vault accepts user funds
     * and relays them to the strategy to be put to work.
     */
    function deposit(uint256 _amount) external nonReentrant {
        uint256 _pool = balance();

        want().safeTransferFrom(msg.sender, address(this), _amount); // @notice we do not check for deflationary tokens
        sendToStrat();

        console.log(
            "totalSupply: %s, amount: %s, pool: %s",
            totalSupply(),
            _amount,
            _pool
        );

        uint256 shares = 0;
        if (totalSupply() == 0) shares = _amount;
        else shares = (_amount * totalSupply()) / _pool;
        _mint(msg.sender, shares);
    }

    /**
     * @dev Withdraw funds from the system. Withdraw the necessary tokens
     * from the strategy in order to pay the user. The user's vault tokens are then burned.
     */
    function withdraw(uint256 _shares) external nonReentrant {
        console.log(
            "balance(): %s, share: %s, total: %s",
            balance(),
            _shares,
            totalSupply()
        );
        uint256 _amount = (balance() * _shares) / totalSupply();
        _burn(msg.sender, _shares);

        uint256 _balance = want().balanceOf(address(this)); // Get the available {want} in this contract

        if (_balance < _amount) {
            strategy.withdraw(_amount - _balance);
            _amount = want().balanceOf(address(this));
        }

        want().safeTransfer(msg.sender, _amount);
        console.log("withdraw: %s", _amount);
    }
}


// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";

import "../interfaces/IYieldContract.sol";
import "./OptimizerStrategyManager.sol";

contract OptimizerStrategy is OptimizerStrategyManager {
  using SafeERC20 for IERC20;

  // We accept {want} and accumulate rewards in {want}.
  address public want;
  IYieldContract public yieldContract;

  /**
   * @dev Events that the contract emits
   */
  event StratHarvest(address indexed harvester, uint256 wantHarvested);
  event FundsPutToWork(uint256 wantAmount);
  event Deposit(uint256 tvl);
  event Withdraw(uint256 tvl);

  /**
   * @param _yieldContract the contract that will hold the yielding position and pay out {want} rewards
   */
  constructor(address _yieldContract) public OptimizerStrategyManager() {
    yieldContract = IYieldContract(_yieldContract);
    want = IYieldContract(yieldContract).underlying();

    IERC20(want).safeApprove(_yieldContract, type(uint256).max);
  }

  /**
   * @dev Deposit into the strategy and put funds to work.
   */
  function deposit() public {
    uint256 wantBal = balanceOfWant();
    if (wantBal > 0) _putToWork(wantBal);

    emit Deposit(balanceOf());
  }

  /**
   * @dev Compound the vault's rewards back into the yielding position.
   */
  function harvest() external virtual {
    uint256 balBefore = balanceOfWant();

    yieldContract.claimRewards();

    uint256 rewardsClaimed = balBefore - balanceOfWant();
    uint256 harvestFeeAmount = (rewardsClaimed * harvestFee) / FEE_DIVISOR;

    IERC20(want).safeTransfer(msg.sender, harvestFeeAmount);
    yieldContract.deposit(rewardsClaimed - harvestFeeAmount);

    emit StratHarvest(msg.sender, rewardsClaimed);
  }

  /**
   * @dev Withdraw funds and send them back to the vault.
   * @param _amount How much {want} to withdraw.
   */
  function withdraw(uint256 _amount) external onlyVault {
    uint256 wantBal = balanceOfWant();

    // @notice ignore deflationary tokens
    if (wantBal < _amount) yieldContract.withdraw(_amount - wantBal);

    // withdrawal fee is simply redistributed to the other vault depositors
    uint256 withdrawalFeeAmount = (_amount * withdrawalFee) / FEE_DIVISOR;

    IERC20(want).safeTransfer(vault, _amount - withdrawalFeeAmount);
    emit Withdraw(balanceOf());
  }

  /**
   * @dev Put _amount of {want} to work in the {yieldContract}
   * @param _amount amount of {want} to deposit into the yield contract.
   */
  function _putToWork(uint256 _amount) internal {
    yieldContract.deposit(_amount);
    emit FundsPutToWork(_amount);
  }

  /**
   * @dev get the total {want} held by the strategy, both deployed and in this contract.
   */
  function balanceOf() public view returns (uint256) {
    return balanceOfWant() + yieldContract.balanceOf(address(this));
  }

  /**
   * @dev get how much {want} this contract holds.
   */
  function balanceOfWant() public view returns (uint256) {
    return IERC20(want).balanceOf(address(this));
  }
}


// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";

contract YieldContract {
  using SafeERC20 for IERC20;

  event RewardsClaimed(address claimer);
  address public underlying;

  mapping(address => uint256) public balanceOf;

  constructor(address _underlying) {
    underlying = _underlying;
  }

  function deposit(uint256 _amount) external {
    IERC20(underlying).safeTransferFrom(msg.sender, address(this), _amount);
    balanceOf[msg.sender] += _amount;
  }

  function withdraw(uint256 _amount) external {
    balanceOf[msg.sender] -= _amount;
    IERC20(underlying).safeTransfer(msg.sender, _amount);
  }

  function claimRewards() external {
    // No rewards are accumulated in this stub contract
    emit RewardsClaimed(msg.sender);
  }
}
