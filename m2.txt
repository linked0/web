import { ClassType, createUnionType } from 'type-graphql';
import { BaseError } from '../utils/BaseError';

export function ServiceResponse<T>(cls: ClassType<T>) {
  return createUnionType({
    name: `${cls.name}ServiceResponse`,
    types: () => [cls, BaseError] as const,
    resolveType: (value) =>
      (value as BaseError).statusCode === undefined ? cls : BaseError,
  });
}


import { ClassType } from "../interfaces";
import { UnionFromClasses } from "../helpers/utils";
import { ResolveTypeOptions } from "./types";
export interface UnionTypeConfig<TClassTypes extends readonly ClassType[]> extends ResolveTypeOptions<UnionFromClasses<TClassTypes>> {
    name: string;
    description?: string;
    types: () => TClassTypes;
}
export declare function createUnionType<T extends readonly ClassType[]>(config: UnionTypeConfig<T>): UnionFromClasses<T>;


: do you think it's right code because UnionTypeConfig and "{
                                                                name: `${cls.name}ServiceResponse`,
                                                                types: () => [cls, BaseError] as const,
                                                                resolveType: (value) =>
                                                                  (value as BaseError).statusCode === undefined ? cls : BaseError,
                                                              }"
are differnt