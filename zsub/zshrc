#######################################
### Below is the common aliases

hgrep() {
	grep -irnH --include=\*.$1 "$2" ./
}
# ii() {
#   idea $@
# }

ii() {
  # Check if $1 is a defined alias.
  if alias "$1" >/dev/null 2>&1; then
    # Retrieve the alias definition, e.g.:
    # alias aaa='code ~/work/web/contracts/AllBasic.sol'
    local alias_def
    alias_def=$(alias "$1")
    # Remove everything up to the equal sign and strip the surrounding single quotes.
    alias_def=${alias_def#*=}
    alias_def=${alias_def#\'}
    alias_def=${alias_def%\'}
    # Extract the second token, assuming the alias is of the form "code <file_path>".
    local file_path
    file_path=$(echo "$alias_def" | awk '{print $2}')
    
    # Expand a leading tilde to the home directory.
    file_path=${file_path/#\~/$HOME}
    
    # Log the file path before calling idea.
    echo "File path: $file_path"
    
    # Call idea with the extracted file path and any extra parameters.
    idea "$file_path" "${@:2}"
  else
    # If $1 isn't an alias, simply pass all parameters to idea.
    idea "$@"
  fi
}

cc() {
  # Check if $1 is a defined alias.
  if alias "$1" >/dev/null 2>&1; then
    # Retrieve the alias definition, e.g.:
    # alias aaa='code ~/work/web/contracts/AllBasic.sol'
    local alias_def
    alias_def=$(alias "$1")
    # Remove everything up to the equal sign and strip the surrounding single quotes.
    alias_def=${alias_def#*=}
    alias_def=${alias_def#\'}
    alias_def=${alias_def%\'}
    # Extract the second token, assuming the alias is of the form "code <file_path>".
    local file_path
    file_path=$(echo "$alias_def" | awk '{print $2}')
    
    # Expand a leading tilde to the home directory.
    file_path=${file_path/#\~/$HOME}
    
    # Log the file path before calling idea.
    echo "File path: $file_path"
    
    # Call idea with the extracted file path and any extra parameters.
    cat "$file_path" "${@:2}"
  else
    # If $1 isn't an alias, simply pass all parameters to idea.
    cat "$@"
  fi
}

adf() {
  echo "echo \"alias $1='code $2'\" >> ~/.zshrc"
}
ch() {
  chatgpt $@
}
chc() {
  cat $1 | ch $2
}
chm() {
  ch "$(cat ~/work/web/m2.txt)"
}
chcm() {
  cat $@ | ch "$(cat ~/work/web/m2.txt)"
}
cmm() {
  if [ -z "$1" ]; then
    echo "No argument"
    return
  fi
  code ~/work/web/zsub/zzmemo/$1
}
py() {
  if [ -z "$1" ]; then
    echo "No argument"
    echo "Usage: py 123/34"
    return
  fi
   python -c "print($1)"
}
py2() {
  if [ -z "$1" ]; then
    echo "No argument"
    echo "Usage: py2 \"a=2;b=2;print(a+b);\""
    return
  fi
   python -c "$1"
}
zipit() {
  if [ -z "$1" ]; then
    echo "No argument"
    echo "Usage: zipit 123"
    echo "Usage: zipit ."
    return
  fi
  # Create temp folder if it doesn't exist
  mkdir -p $HOME/temp

  # If argument is ".", use the current directory name as base
  if [ "$1" = "." ]; then
    base=$(basename "$PWD")
  else
    base="$1"
  fi

  timestamp=$(date +%Y%m%d%H%M%S)
  filename="${base}_${timestamp}.zip"

  if [ "$1" = "." ]; then
    # When zipping the current directory, file paths don't have a parent folder
    zip -r "$HOME/temp/$filename" "$1" -x "node_modules/*" ".git/*" "*/node_modules/*" "*/.git/*" "artifacts/*" "*/artifacts/*"
  else
    # When zipping a named folder, the patterns can include the parent directory
    zip -r "$HOME/temp/$filename" "$1" -x "*/node_modules/*" "*/.git/*" "*/artifacts/*"
  fi

  echo "=== Showing the file in temp folder ==="
  ls $HOME/temp/$filename
}

alias python=python3
alias pip=pip3
# alias geth=~/work/poohgeth/build/bin/geth

alias aaa='code ~/work/web/contracts/AllBasic.sol'
alias bbb='code ~/work/web/test/all-basic.ts'
alias ccc='code ~/work/web/scripts/deploy.ts'
alias aaaf='code ~/work/webf/src/Counter.sol'
alias bbbf='code ~/work/webf/test/Counter.t.sol'
alias cccf='code ~/work/webf/script/Counter.s.sol'
alias ddd='code ~/work/web/dev.md'
alias eee='code ~/work/web/.env'
alias ppp='code ~/work/web/package.json'
alias hhh='code ~/work/web/hardhat.config.ts'
alias ttt='code ~/work/web/tsconfig.json'
alias rrr='code ~/work/web/README.md'
alias mmm='code ~/work/web/memo.txt'
alias mm2='code ~/work/web/m2.txt'
alias mms='code ~/work/web/ms.txt'
alias zz='code ~/.zshrc'
alias zz2='code ~/work/web/zsub/zshrc'
alias ff='code ./foundry.toml'
alias pp='code ./package.json'
alias hh='code ./hardhat.config.ts'
alias ee='code ./.env'
alias re='code ./remappings.txt'
alias rr='code ./README.md'
alias ma='code ./Makefile'

alias zzz='. ~/.zshrc'
alias cazz='cat ~/.zshrc'
alias caee='cat ~/work/web/.env'
alias cpmm='mkdir -p ~/work/web/zsub/zzmemo; cp ~/work/web/memo.txt ~/work/web/zsub/zzmemo/memo.txt.bak.$(date +%y%m%d%H%M%S)'
alias lmm='ls -al ~/work/web/zsub/zzmemo'

alias occ='open https://colab.research.google.com/drive/1QD7vqBdoZvOd-2tBAYIMOSQoZF6-L-BX#scrollTo=f3NGQk2BhcOu'
alias ozz='open /Users/hyunjaelee/work/web/ex/node_modules/@openzeppelin/contracts'

alias web='cd ~/work/web'
alias webf='cd ~/work/webf'
alias ex5='cd ~/work/web/ex5'
alias exj='cd ~/work/web/exlang/exj'
alias ext='cd ~/work/web/exlang/ext'
alias exp='cd ~/work/web/exlang/exp'
alias exr='cd ~/work/web/exlang/exr'
alias exg='cd ~/work/web/exlang/exg'

alias lsc='ls -al ~/work/web/ex/contracts'
alias lss='ls -al ~/work/web/ex/scripts'
alias lst='ls -al ~/work/web/ex/test'

alias cb="curl -L bit.ly/3MT0VRb"
alias cb2="curl -L https://linked0.github.io/web/dev2.md"
alias cbm="curl -L https://linked0.github.io/web/memo.txt"
alias cbb="open https://bit.ly/3MVG5AN"

alias ec1="ssh -i ~/pooh/tednet.pem ubuntu@3.37.37.195"
alias ec2="ssh -i ~/pooh/tednet.pem ubuntu@3.37.170.83"
alias ec3="ssh -i ~/pooh/tednet.pem ubuntu@15.165.195.41"

alias ecstart="aws ec2 start-instances --instance-ids i-02c89e86234e05850"
alias ecstop="aws ec2 stop-instances --instance-ids i-02c89e86234e05850"
alias ecst="aws ec2 describe-instances --instance-ids i-02c89e86234e05850 --query 'Reservations[*].Instances[*].State.Name' --output text"
alias ecstart2="aws ec2 start-instances --instance-ids i-0dae133af2b0dd1f5"
alias ecstop2="aws ec2 stop-instances --instance-ids i-0dae133af2b0dd1f5"
alias ecst2="aws ec2 describe-instances --instance-ids i-0dae133af2b0dd1f5 --query 'Reservations[*].Instances[*].State.Name' --output text"

export PATH="$PATH:$HOME/.local/bin"

